tm_shape(pop_centroids) +
tm_dots(col = "red")
pop_centroids <- weighted_centroids(us.counties,"STATE_NAME", "PO90")
weighted_centroids <- function(polys, stateid,popvar){
#checking for sf object
if(!any(class(polys) == "sf")){
stop("This function only works for sf :( ")
}
#computing centroids
centroids <- st_centroid(st_geometry(polys))
#extracting centroid coordinates from sf point structure
cen_coords <- do.call(rbind, centroids) %>%
as_tibble() %>% setNames(c("lon","lat"))
#adding coordinates to the sf dataframe
polys["lon"] <- cen_coords["lon"]
polys["lat"] <- cen_coords["lat"]
#dropping geometry
polys_df <- st_drop_geometry(polys)
#getting state names or ids
states <- unique(polys_df[stateid])
#creating empty vector to store lat/lon
longitude <- rep(NA, length(states))
latitude <- rep(NA, length(states))
#computing the weight centroid for each state
for (i in 1:length(states)){
state_counties <- polys_df[which(polys_df[stateid] == states[[i]]),]
w <- state_counties[popvar]
wx <- state_counties["lon"] * w
wy <- state_counties["lat"] * w
longitude[i] <- sum(wx) / sum(w)
latitude[i] <- sum(wy) / sum(w)
}
#creating a dataframe
df <- data.frame(states,longitude,latitude)
#converting the dataframe to sf
sf_pop_centroids <- st_as_sf(df, coords = c("longitude", "latitude"))
}
pop_centroids <- weighted_centroids(us.counties,"STATE_NAME", "PO90")
tm_shape(us.counties) +
tm_borders() +
tm_shape(pop_centroids) +
tm_dots(col = "red")
weighted_centroids <- function(polys, stateid,popvar){
#checking for sf object
if(!any(class(polys) == "sf")){
stop("This function only works for sf :( ")
}
#computing centroids
centroids <- st_centroid(st_geometry(polys))
#extracting centroid coordinates from sf point structure
cen_coords <- do.call(rbind, centroids) %>%
as_tibble() %>% setNames(c("lon","lat"))
#adding coordinates to the sf dataframe
polys["lon"] <- cen_coords["lon"]
polys["lat"] <- cen_coords["lat"]
#dropping geometry
polys_df <- st_drop_geometry(polys)
#getting state names or ids
states <- unique(polys_df[stateid])
#creating empty vector to store lat/lon
longitude <- rep(NA, length(states))
latitude <- rep(NA, length(states))
#computing the weight centroid for each state
for (i in 1:length(states)){
state_counties <- polys_df[which(polys_df[stateid] == states[[i]]),]
w <- state_counties[popvar]
wx <- state_counties["lon"] * w
wy <- state_counties["lat"] * w
longitude[i] <- sum(wx) / sum(w)
latitude[i] <- sum(wy) / sum(w)
}
#creating a dataframe
df <- data.frame(states,longitude,latitude)
#converting the dataframe to sf
sf_pop_centroids <- st_as_sf(df, coords = c("latitude","longitude"))
}
pop_centroids <- weighted_centroids(us.counties,"STATE_NAME", "PO90")
tm_shape(us.counties) +
tm_borders() +
tm_shape(pop_centroids) +
tm_dots(col = "red")
View(pop_centroids)
tm_shape(pop_centroids) +
tm_dots(col = "red")
weighted_centroids <- function(polys, stateid,popvar){
#checking for sf object
if(!any(class(polys) == "sf")){
stop("This function only works for sf :( ")
}
#computing centroids
centroids <- st_centroid(st_geometry(polys))
#extracting centroid coordinates from sf point structure
cen_coords <- do.call(rbind, centroids) %>%
as_tibble() %>% setNames(c("lon","lat"))
#adding coordinates to the sf dataframe
polys["lon"] <- cen_coords["lon"]
polys["lat"] <- cen_coords["lat"]
#dropping geometry
polys_df <- st_drop_geometry(polys)
#getting state names or ids
states <- unique(polys_df[stateid])
#creating empty vector to store lat/lon
longitude <- rep(NA, length(states))
latitude <- rep(NA, length(states))
#computing the weight centroid for each state
for (i in 1:length(states)){
state_counties <- polys_df[which(polys_df[stateid] == states[[i]]),]
w <- state_counties[popvar]
wx <- state_counties["lon"] * w
wy <- state_counties["lat"] * w
longitude[i] <- sum(wx) / sum(w)
latitude[i] <- sum(wy) / sum(w)
}
#creating a dataframe
df <- data.frame(states,longitude,latitude)
#converting the dataframe to sf
sf_pop_centroids <- st_as_sf(df, coords = c("longitude","latitude"))
}
pop_centroids <- weighted_centroids(us.counties,"STATE_NAME", "PO90")
tm_shape(pop_centroids) +
tm_dots(col = "red")
View(pop_centroids)
weighted_centroids <- function(polys, stateid,popvar){
#checking for sf object
if(!any(class(polys) == "sf")){
stop("This function only works for sf :( ")
}
#computing centroids
centroids <- st_centroid(st_geometry(polys))
#extracting centroid coordinates from sf point structure
cen_coords <- do.call(rbind, centroids) %>%
as_tibble() %>% setNames(c("lon","lat"))
#adding coordinates to the sf dataframe
polys["lon"] <- cen_coords["lon"]
polys["lat"] <- cen_coords["lat"]
#dropping geometry
polys_df <- st_drop_geometry(polys)
#getting state names or ids
states <- unique(polys_df[stateid])
#creating empty vector to store lat/lon
longitude <- rep(NA, length(states))
latitude <- rep(NA, length(states))
#computing the weight centroid for each state
for (i in 1:length(states)){
state_counties <- polys_df[which(polys_df[stateid] == states[i]),]
w <- state_counties[popvar]
wx <- state_counties["lon"] * w
wy <- state_counties["lat"] * w
longitude[i] <- sum(wx) / sum(w)
latitude[i] <- sum(wy) / sum(w)
}
#creating a dataframe
df <- data.frame(states,longitude,latitude)
#converting the dataframe to sf
sf_pop_centroids <- st_as_sf(df, coords = c("longitude","latitude"))
}
pop_centroids <- weighted_centroids(us.counties,"STATE_NAME", "PO90")
states <- unique(us.counties["STATE_NAME"])
states <- unique(us_test["STATE_NAME"])
states <- unique(us_test["STATE_NAME"])[1]
states <- as.vector(unique(us_test["STATE_NAME"]))
states <- unique(us_test["STATE_NAME"])
states[1,]
states[2,]
weighted_centroids <- function(polys, stateid,popvar){
#checking for sf object
if(!any(class(polys) == "sf")){
stop("This function only works for sf :( ")
}
#computing centroids
centroids <- st_centroid(st_geometry(polys))
#extracting centroid coordinates from sf point structure
cen_coords <- do.call(rbind, centroids) %>%
as_tibble() %>% setNames(c("lon","lat"))
#adding coordinates to the sf dataframe
polys["lon"] <- cen_coords["lon"]
polys["lat"] <- cen_coords["lat"]
#dropping geometry
polys_df <- st_drop_geometry(polys)
#getting state names or ids
states <- unique(polys_df[stateid])
#creating empty vector to store lat/lon
longitude <- rep(NA, length(states))
latitude <- rep(NA, length(states))
#computing the weight centroid for each state
for (i in 1:length(states)){
state_counties <- polys_df[which(polys_df[stateid] == states[i,]),]
w <- state_counties[popvar]
wx <- state_counties["lon"] * w
wy <- state_counties["lat"] * w
longitude[i] <- sum(wx) / sum(w)
latitude[i] <- sum(wy) / sum(w)
}
#creating a dataframe
df <- data.frame(states,longitude,latitude)
#converting the dataframe to sf
sf_pop_centroids <- st_as_sf(df, coords = c("longitude","latitude"))
}
pop_centroids <- weighted_centroids(us.counties,"STATE_NAME", "PO90")
tm_shape(pop_centroids) +
tm_dots(col = "red")
length(states)
nrow(states)
weighted_centroids <- function(polys, stateid,popvar){
#checking for sf object
if(!any(class(polys) == "sf")){
stop("This function only works for sf :( ")
}
#computing centroids
centroids <- st_centroid(st_geometry(polys))
#extracting centroid coordinates from sf point structure
cen_coords <- do.call(rbind, centroids) %>%
as_tibble() %>% setNames(c("lon","lat"))
#adding coordinates to the sf dataframe
polys["lon"] <- cen_coords["lon"]
polys["lat"] <- cen_coords["lat"]
#dropping geometry
polys_df <- st_drop_geometry(polys)
#getting state names or ids
states <- unique(polys_df[stateid])
#creating empty vector to store lat/lon
longitude <- rep(NA, length(states))
latitude <- rep(NA, length(states))
#computing the weight centroid for each state
for (i in 1:nrow(states)){
state_counties <- polys_df[which(polys_df[stateid] == states[i,]),]
w <- state_counties[popvar]
wx <- state_counties["lon"] * w
wy <- state_counties["lat"] * w
longitude[i] <- sum(wx) / sum(w)
latitude[i] <- sum(wy) / sum(w)
}
#creating a dataframe
df <- data.frame(states,longitude,latitude)
#converting the dataframe to sf
sf_pop_centroids <- st_as_sf(df, coords = c("longitude","latitude"))
}
pop_centroids <- weighted_centroids(us.counties,"STATE_NAME", "PO90")
tm_shape(pop_centroids) +
tm_dots(col = "red")
tm_shape(us.counties) +
tm_borders() +
tm_shape(pop_centroids) +
tm_dots(col = "red")
tm_shape(us.counties) +
tm_borders() +
tm_shape(pop_centroids) +
tm_dots(col = "red", size =1)
tm_shape(us.counties) +
tm_borders() +
tm_shape(pop_centroids) +
tm_dots(col = "red", size =.2)
tm_shape(us.counties) +
tm_borders() +
tm_shape(pop_centroids) +
tm_dots(col = "red", size =.1)
library(spData)
us_states <- spData::us_states
tm_shape(us_states) +
tm_borders() +
tm_shape(pop_centroids) +
tm_dots(col = "red", size =.1)
state_centroids <- st_centroid(st_geometry(us_states))
tm_shape(us_states) +
tm_borders() +
tm_shape(pop_centroids) +
tm_dots(col = "orange", size =.1) +
tm_shape(state_centroids) +
tm_dots(col = "red", size =.1)
tmap_mode("view")
tm_shape(us_states) +
tm_borders() +
tm_shape(pop_centroids) +
tm_dots(col = "orange", size =.1) +
tm_shape(state_centroids) +
tm_dots(col = "red", size =.1)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
data <- guerry %>% select("Donatns","Literacy","Infants")
data <- guerry %>% select("Donatns","Litercy","Infants")
data <- guerry %>% select("Donatns","Litercy","Infants")
n <- nrow(guerry)
doncat <- rep(0, n)
doncat[guerry$Donatns > 10996] <- 1
guerry$doncat <- doncat
data$doncat <- doncat
ggplot(data) +
geom_histogram()
library(plotly)
plot_ly(data = data, type = "box")
summary(data)
st_drop_geometry(data)
summary(data)
data <- st_drop_geometry(data)
summary(data)
shiny::runApp('dashboard_practicum')
runApp('dashboard_practicum')
remotes::install_github("morrisonge/spatmap")
remotes::install_github("spatialanalysis/geodaData")
remote::install_github("lixun/rgeoda")
library(spatmap)
library(spatmap)
remotes::install_github("morrisonge/spatmap")
install.packages("RColorBrewer")
remotes::install_github("morrisonge/spatmap")
remotes::install_github("morrisonge/spatmap")
remotes::install_github("morrisonge/spatmap")
remotes::install_github("morrisonge/spatmap")
remotes::install_github("morrisonge/spatmap")
remotes::install_github("morrisonge/spatmap")
remotes::install_github("morrisonge/spatmap")
remotes::install_github("morrisonge/spatmap")
library(spatmap)
library(sf)
library(tmap)
guerry <- geodaData::guerry
moran_map(guerry, "Donatns", permutations = 99999)
moran_map(guerry, "Donatns", permutations = 99999) +
tm_style("cobalt")
significance_map(guerry,type = "moran")
significance_map(guerry,"Donatns",type = "moran")
moran_map(guerry, "Donatns")
moran_map(guerry, "Donatns", permutations = 99999)
significance_map(guerry,"Donatns",type = "moran", permutations = 99999)
moran_map(guerry, "Donatns", permutations = 99999, alpha = .01)
significance_map(guerry,"Donatns",type = "moran", permutations = 99999, alpha = .01)
tmap_mode("view")
moran_map(guerry, "Donatns", permutations = 99999) +
tm_borders() +
tm_style("cobalt") +
tm_layout(legend.outside = TRUE, main.title = "Local Moran Map of Donatns")
moran_map(guerry, "Donatns", permutations = 99999) +
tm_borders() +
tm_style("cobalt") +
tm_layout(legend.outside = TRUE,title = "Local Moran Map of Donatns")
significance_map(guerry,"Donatns",type = "moran", permutations = 99999) +
tm_borders() +
tm_style("cobalt") +
tm_layout(legend.outside = TRUE, title = "Local Moran Significance Map ")
tmap_mode("view")
moran_map(guerry, "Donatns", permutations = 99999) +
tm_borders() +
tm_style("cobalt") +
tm_layout(legend.outside = TRUE,title = "Local Moran Map of Donatns")
significance_map(guerry,"Donatns",type = "moran", permutations = 99999) +
tm_borders() +
tm_style("cobalt") +
tm_layout(legend.outside = TRUE, title = "Local Moran Significance Map ")
?tm_style
geary_map(guerry,"Donatns") +
tm_style("natural")
geary_map(guerry,"Donatns") +
tm_style("grey")
geary_map(guerry,"Donatns") +
tm_style("albatross")
geary_map(guerry,"Donatns") +
tm_style("beaver")
geary_map(guerry,"Donatns") +
tm_style("classic")
geary_map(guerry,"Donatns") +
tm_style("cobalt")
geary_map(guerry,"Donatns") +
tm_style("cobalt") +
tm_borders() +
tm_layout(title = "Local Geary Cluster Map Donatns")
multi_geary_map(guerry,"Donatns") +
tm_style("cobalt") +
tm_borders() +
tm_layout(title = "Local Geary Cluster Map Donatns")
multi_geary_map(guerry,"Donatns","Infants") +
tm_style("cobalt") +
tm_borders() +
tm_layout(title = "Local Geary Cluster Map Donatns")
library(tidyverse)
multi_geary_map(guerry,"Donatns","Infants") +
tm_style("cobalt") +
tm_borders() +
tm_layout(title = "Local Geary Cluster Map Donatns")
multi_geary_map(guerry,c("Donatns","Infants")) +
tm_style("cobalt") +
tm_borders() +
tm_layout(title = "Local Geary Cluster Map Donatns")
significance_map(guerry,c("Donatns", "Infants"))  +
tm_style("cobalt") +
tm_borders() +
tm_layout(title = "Multivariate Local Geary Significance Map Donatns")
significance_map(guerry,c("Donatns", "Infants"),type = "multigeary")  +
tm_style("cobalt") +
tm_borders() +
tm_layout(title = "Multivariate Local Geary Significance Map Donatns")
significance_map(guerry,c("Donatns", "Infants"),type = "geary")  +
tm_style("cobalt") +
tm_borders() +
tm_layout(title = "Multivariate Local Geary Significance Map Donatns")
g_map(guerry,"Donatns", permutation = 99999) +
tm_borders() +
tm_style("cobalt") +
tm_layout(title = "Local G Cluster Map")
gstar_map(guerry,"Donatns", permutation = 99999) +
tm_borders() +
tm_style("cobalt") +
tm_layout(title = "Local G Cluster Map")
shiny::runApp('dashboard_practicum')
runApp('dashboard_practicum')
runApp('dashboard_practicum')
runApp('dashboard_practicum')
runApp('dashboard_practicum')
runApp('dashboard_practicum')
runApp('dashboard_practicum')
runApp('dashboard_practicum')
runApp('dashboard_practicum')
shiny::runApp('dashboard_practicum')
(3.3 + 3.3 + 3.7 + 2.7 + 2.7 + 3.3 + 3.3 + 3 + 4 + 3.7 + 3.7 + 3.7 + 4) /13
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(spdep)
library(tmap)
library(geodaData)
library(spatmap)
geodaData::commpop
library(sf)
library(tmap)
library(rgeoda)
library(geodaData)
library(spatmap)
guerry <- geodaData::guerry
tm_shape(guerry) +
tm_fill("Donatns", style = "jenks", n = 6) +
tm_borders() +
tm_layout(legend.outside = TRUE, legend.outside.position = "left")
moran_map(guerry,"Donatns")
significance_map(guerry,"Donatns", type = "moran")
moran_map(guerry,"Donatns") +
tm_borders() +
tm_layout(title = "Local Moran Cluster Map of Donatns", legend.outside = TRUE)
tmap_mode("view")
moran_map(guerry,"Donatns") +
tm_borders() +
tm_layout(title = "Local Moran Cluster Map of Donatns",legend.outside = TRUE)
tmap_mode("plot")
moran_map(guerry,"Donatns", permutations = 99999) +
tm_borders()
significance_map(guerry,"Donatns", type = "moran", permutations = 99999)
moran_map(guerry,"Donatns", permutations = 99999, alpha = .01)
guerry$cut.literacy <- cut(guerry$Litercy, breaks = 2)
guerry$cut.clergy <- cut(guerry$Clergy, breaks = 2)
moran_map(guerry, "Donatns", permutations = 99999) +
tm_borders() +
tm_facets(by = c("cut.literacy","cut.clergy"),free.coords = FALSE,drop.units=FALSE)
geary_map(guerry,"Donatns") +
tm_borders() +
tm_layout("Local Geary Cluster Map", legend.outside = TRUE)
significance_map(guerry,"Donatns",type = "geary") +
tm_borders() +
tm_layout("Local Geary Significance Map", legend.outside = TRUE)
geary_map(guerry,"Donatns",permutations = 99999)  +
tm_borders() +
tm_layout("Local Geary Cluster Map", legend.outside = TRUE)
significance_map(guerry,"Donatns",type = "geary",permutations = 99999) +
tm_borders() +
tm_layout("Local Geary Significance Map", legend.outside = TRUE)
geary_map(guerry,"Donatns",permutations = 99999,alpha = .01)  +
tm_borders() +
tm_layout("Local Geary Cluster Map", legend.outside = TRUE)
g_map(guerry, "Donatns") +
tm_borders() +
tm_layout(title = "Local G Cluster Map",legend.outside = TRUE)
gstar_map(guerry, "Donatns") +
tm_borders() +
tm_layout(title = "Local G* Cluster Map",legend.outside = TRUE)
significance_map(guerry,"Donatns",type = "g") +
tm_borders() +
tm_layout(title = "Local G Significance Map",legend.outside = TRUE)
g_map(guerry,"Donatns",permutations = 99999,alpha = .01) +
tm_borders() +
tm_layout(title = "Local G Cluster Map",legend.outside = TRUE)
significance_map(guerry,"Donatns",type = "g", permutations = 99999,alpha = .01) +
tm_borders() +
tm_layout(title = "Local G Significance Map",legend.outside = TRUE)
n <- nrow(guerry)
doncat <- rep(0, n)
doncat[guerry$Donatns > 10996] <- 1
guerry$doncat <- doncat
tm_shape(guerry) +
tm_fill("doncat", style = "cat", palette = c("white", "blue")) +
tm_borders()
joincount_map(guerry,"doncat",permutations = 99999) +
tm_borders() +
tm_layout(title = "Local G Cluster Map",legend.outside = TRUE)
setwd("~/dashboard_practicum")
setwd("~/Covid-19-Dashboard")
shiny::runApp()
.043*20500 + .053 * 50000
setwd("~/covid_website/data")
knitr::opts_chunk$set(echo = TRUE)
us <- st_read("demographic.shp")
st_write(us,"us_counties.geojson")
library(RColorBrewer)
brewer.pal("Oranges",5)
brewer.pal("Oranges")
brewer.pal(5,"Oranges")
n <- nrow(us)
FIPS <- rep(NA, n)
state <- us$STATEFP
county <- us$COUNTYF
for(i in 1:n){
FIPS[i] <- paste0(state[i],county[i])
}
us$FIPS <- FIPS
View(us)
us$FIPS <- as.numeric(FIPS)
st_write(us,"us_counties.geojson")
